#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/shm.h>
#include <unistd.h>

struct shmseg {
    int I;    // rows in matrixOne
    int J;    // columns in matrixOne == rows in matrixTwo
    int K;    // columns in matrixTwo
    char outputFile[100];
};
struct shmseg* shmp;

/*
    We are storing 2D matrices matrixOne and matrixTwo as linear arrays.

    If you have a 2D matrix of size (n X m), a coordinate (x, y) gets mapped to
    linear 1D array index (x * m + y).

    Similarly, a linear 1D array index of i gets mapped into 2D coordinates of
    (i/m, i%m)
*/

int* visitedRowOne;    // marks rows of matrixOne as read from in1.txt
int* visitedRowTwo;    // marks rows of matrixTwo as read from in2.txt
int* matrixOne;        // stores matrix read from in1.txt
int* matrixTwo;        // stores matrix read from in2.txt

void createOrConnectSharedMemory(int create) {
    // create = 1 -> create shared memory if it does not exist
    int SHM_KEY, shmid;

    // First shared memory segment - stores shmseg
    SHM_KEY = ftok("./p1.c", 0x1);
    if (create == 1) {
        shmid = shmget(SHM_KEY, sizeof(struct shmseg), 0644 | IPC_CREAT);
    } else {
        shmid = shmget(SHM_KEY, sizeof(struct shmseg), 0644);
    }
    if (shmid == -1) {
        perror("Shared memory");
        exit(-1);
    }
    shmp = (struct shmseg*) shmat(shmid, NULL, 0);
    if (shmp == (void*) -1) {
        perror("Shared memory attach");
        exit(-1);
    }

    if (create == 1) {
        shmp->I = I;
        shmp->J = J;
        shmp->K = K;
    }

    // Second shared memory segment - stores visitedRowOne
    SHM_KEY = ftok("./p1.c", 0x2);
    if (create == 1) {
        shmid = shmget(SHM_KEY, shmp->I * sizeof(int), 0644 | IPC_CREAT);
    } else {
        shmid = shmget(SHM_KEY, shmp->I * sizeof(int), 0644);
    }
    if (shmid == -1) {
        perror("Shared memory");
        exit(-1);
    }
    visitedRowOne = (int*) shmat(shmid, NULL, 0);
    if (shmp == (void*) -1) {
        perror("Shared memory attach");
        exit(-1);
    }

    // Third shared memory segment - stores visitedRowTwo
    SHM_KEY = ftok("./p1.c", 0x3);
    if (create == 1) {
        shmid = shmget(SHM_KEY, shmp->J * sizeof(int), 0644 | IPC_CREAT);
    } else {
        shmid = shmget(SHM_KEY, shmp->J * sizeof(int), 0644);
    }
    if (shmid == -1) {
        perror("Shared memory");
        exit(-1);
    }
    visitedRowTwo = (int*) shmat(shmid, NULL, 0);
    if (shmp == (void*) -1) {
        perror("Shared memory attach");
        exit(-1);
    }

    // Fourth shared memory segment - stores matrixOne
    SHM_KEY = ftok("./p1.c", 0x4);
    if (create == 1) {
        shmid = shmget(SHM_KEY, shmp->I * shmp->J * sizeof(int), 0644 | IPC_CREAT);
    } else {
        shmid = shmget(SHM_KEY, shmp->I * shmp->J * sizeof(int), 0644);
    }
    if (shmid == -1) {
        perror("Shared memory");
        exit(-1);
    }
    matrixOne = (int*) shmat(shmid, NULL, 0);
    if (shmp == (void*) -1) {
        perror("Shared memory attach");
        exit(-1);
    }

    //  Fifth shared memory segment - stores matrixTwo
    SHM_KEY = ftok("./p1.c", 0x5);
    if (create == 1) {
        shmid = shmget(SHM_KEY, shmp->J * shmp->K * sizeof(int), 0644 | IPC_CREAT);
    } else {
        shmid = shmget(SHM_KEY, shmp->J * shmp->K * sizeof(int), 0644);
    }
    if (shmid == -1) {
        perror("Shared memory");
        exit(-1);
    }
    matrixTwo = (int*) shmat(shmid, NULL, 0);
    if (shmp == (void*) -1) {
        perror("Shared memory attach");
        exit(-1);
    }
}

void detachSharedMemory() {
    // Detaches from first shared memory segment
    if (shmdt(shmp) == -1) {
        perror("shmdt");
        exit(-1);
    }

    // Detaches from second shared memory segment
    if (shmdt(visitedRowOne) == -1) {
        perror("shmdt");
        exit(-1);
    }

    // Detaches from third shared memory segment
    if (shmdt(visitedRowTwo) == -1) {
        perror("shmdt");
        exit(-1);
    }

    // Detaches from fourth shared memory segment
    if (shmdt(matrixOne) == -1) {
        perror("shmdt");
        exit(-1);
    }

    // Detaches from fifth shared memory segment
    if (shmdt(matrixTwo) == -1) {
        perror("shmdt");
        exit(-1);
    }
}

void destroySharedMemory() {
    // Destroys first shared memory segment
    int SHM_KEY = ftok("./p1.c", 0x1);
    int shmid = shmget(SHM_KEY, sizeof(struct shmseg), 0644);
    if (shmctl(shmid, IPC_RMID, 0) == -1) {
        perror("shmctl");
        exit(-1);
    }

    // Destroys second shared memory segment
    SHM_KEY = ftok("./p1.c", 0x2);
    shmid = shmget(SHM_KEY, shmp->I * sizeof(int), 0644);
    if (shmctl(shmid, IPC_RMID, 0) == -1) {
        perror("shmctl");
        exit(-1);
    }

    // Destroys third shared memory segment
    SHM_KEY = ftok("./p1.c", 0x3);
    shmid = shmget(SHM_KEY, shmp->J * sizeof(int), 0644);
    if (shmctl(shmid, IPC_RMID, 0) == -1) {
        perror("shmctl");
        exit(-1);
    }

    // Destroys fourth shared memory segment
    SHM_KEY = ftok("./p1.c", 0x4);
    shmid = shmget(SHM_KEY, shmp->I * shmp->J * sizeof(int), 0644);
    if (shmctl(shmid, IPC_RMID, 0) == -1) {
        perror("shmctl");
        exit(-1);
    }

    // Destroys fifth shared memory segment
    SHM_KEY = ftok("./p1.c", 0x5);
    shmid = shmget(SHM_KEY, shmp->J * shmp->K * sizeof(int), 0644);
    if (shmctl(shmid, IPC_RMID, 0) == -1) {
        perror("shmctl");
        exit(-1);
    }
}